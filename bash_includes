###
### General bash configuration, to include in osx or linux servers
###
export EDITOR=vim
HISTFILESIZE=100000
HISTSIZE=10000
export HISTCONTROL=ignoredups
export HISTCONTROL=ignoreboth  # ignore same sucessive entries
shopt -s histappend
PROMPT_COMMAND='history -a'

# up arrow bash history
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

###
### Prompt
###
# Show current git project info
parse_git_dirty() {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working directory clean" ]] && echo "*"
}
parse_git_branch() {
  git branch 2> /dev/null | sed -e "/^[^*]/d" -e "s/* \(.*\)/(\1$(parse_git_dirty))/"
}
current_virtualenv() {
  echo `basename $VIRTUAL_ENV 2>/dev/null`
}
function __prompt_command() {
  local LAST_EXIT_CODE="$?"

  ### Define Colors
  txtblack='\[\033[0;30m\]'
  txtred='\[\033[0;31m\]'
  txtgreen='\[\033[0;32m\]'
  txtorange='\[\033[0;33m\]'
  txtblue='\[\033[0;34m\]'
  txtpurple='\[\033[0;35m\]'
  txtwhite='\[\033[0;37m\]'
  txtend='\[\033[0m\]'

  ### Define PS1
  # extra vertical space 
  PS1="\n"
  # username @ hostname, then indicate previous exit code
  PS1+="${txtgreen}\u$DIM${txtend} ${txtwhite}@${txtend} ${txtorange}\h${txtend}"
  # python virtualenv, if we're in one
  if [ -n "$(current_virtualenv)" ]
  then
    PS1+=" ${txtblue}($(current_virtualenv))${txtend}"
  fi
  # sun or rain based on last exit code
  if [ $LAST_EXIT_CODE = 0 ]
  then
    PS1+=" ${txtgreen}☀${txtend}"
  else
    PS1+=" ${txtblue}☁${txtend}"
  fi
  PS1+="\n"
  # pwd, git branch and prompt
  PS1+="${txtpurple}\$PWD${txtend} ${txtwhite}\$(parse_git_branch)$ "
}
export PROMPT_COMMAND=__prompt_command

###
### useful aliases
###
alias lsl='ls -G -lh --color=auto'
lsp() { ls -lh $1 | egrep -v '.*.pyc$'; }
alias grep='grep -i --color=auto'
alias gg='git grep -n --color --heading --break'
alias .b='source ~/.bashrc && source ~/.bash_profile'

# tmux 256 colors hack
alias tmux="TERM=screen-256color-bce tmux"

# rename the current tab in terminal/iterm2
rn() { export PROMPT_COMMAND="echo -ne \"\033]0;$1\007\""; }

# Get a rough outline of a python file - show class & function declarations, block comments, first line of docstrings
pyoutline() { egrep --color=auto '^[\t ]*class|^[\t ]*def|^[\t ]*###.+$|^[\t ]*""".+$' $1; } # apparently \s doesn't work so I use tab or space
wcr() { wc -l `find . -type f | egrep "$1$"`; } # recursive word count, pass in the file extension

alias ip='curl icanhazip.com'

# create an empty new bash script
bashscript() { touch $1; chmod a+x $1; echo -e "#!/bin/bash\n\n" > $1; vim $1; }

# convert a simple yaml file to json
yaml_file_as_json() { ruby -e 'require "yaml"; require "json"; puts JSON.dump(YAML.parse(open(File.expand_path("'"$1"'")).read).to_ruby)'; }
